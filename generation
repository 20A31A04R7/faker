import pandas as pd
import numpy as np
from faker import Faker

fake = Faker()

# Define product names for each category
product_names = {
    'Electronics': ['Smartphone', 'Laptop', 'Tablet', 'Headphones', 'Camera'],
    'Clothing': ['T-shirt', 'Jeans', 'Jacket', 'Dress', 'Sneakers'],
    'Grocery': ['Milk', 'Bread', 'Eggs', 'Fruits', 'Vegetables'],
    'Furniture': ['Chair', 'Table', 'Sofa', 'Bed', 'Bookshelf'],
    'Sports': ['Football', 'Basketball', 'Tennis Racket', 'Golf Club', 'Yoga Mat'],
    'Books': ['Novel', 'Biography', 'Comics', 'Cookbook', 'Textbook']
}

# Define a list of specific domain names
ecommerce_domains = ['Amazon', 'Flipkart', 'Myntra', 'eBay', 'Meesho']

# Define a list of specific countries
countries = ['United States', 'India', 'Germany', 'Australia', 'Canada', 'Brazil']

def generate_data(num_records, rogue_probability=0.2):  # Increased rogue probability
    data = []
    for _ in range(num_records):
        # Select a random product category
        product_category = fake.random_element(elements=list(product_names.keys()))
        
        # Select a random product name from the chosen category
        product_name = fake.random_element(elements=product_names[product_category])
        
        # Determine payment success or failure
        payment_success = fake.random_element(elements=('Y', 'N'))
        
        # Create a standard record
        record = {
            'order_id': fake.uuid4(),
            'customer_id': fake.uuid4(),
            'customer_name': fake.name(),
            'product_id': fake.uuid4(),
            'product_name': product_name,
            'product_category': product_category,
            'payment_type': fake.random_element(elements=('card', 'Internet Banking', 'UPI', 'Wallet')),
            'qty': np.random.randint(1, 10),
            'price': round(np.random.uniform(10, 500), 2),
            'datetime': fake.date_time_this_decade(),
            'country': fake.random_element(elements=countries),  # Choose from specific countries
            'city': fake.city(),
            'ecommerce_website_name': fake.random_element(elements=ecommerce_domains),
            'payment_txn_id': fake.uuid4(),
            'payment_txn_success': payment_success,
            'failure_reason': fake.sentence() if payment_success == 'N' else None
        }
        
        # Introduce rogue records based on the probability
        if np.random.rand() < rogue_probability:
            # Apply multiple rogue changes to the record
            rogue_fields = fake.random_choices(elements=['qty', 'price', 'payment_type', 'country'], length=2)
            
            if 'qty' in rogue_fields:
                record['qty'] = np.random.choice([-1, 0, 1000])  # Invalid quantities
            if 'price' in rogue_fields:
                record['price'] = np.random.choice([-100, 0])  # Invalid prices
            if 'payment_type' in rogue_fields:
                record['payment_type'] = 'Unknown'  # Invalid payment type
            if 'country' in rogue_fields:
                record['country'] = 'Unknown'  # Invalid country
        
        data.append(record)
    
    return pd.DataFrame(data)

# Generate the data and save it to a CSV file
df = generate_data(10000)
df.to_csv('generated_data2.csv', index=False)


import numpy as np
import pandas as pd
from faker import Faker

fake = Faker()

# Define valid domains, payment types, and failure reasons
ecommerce_domains = ['Amazon', 'Flipkart', 'Myntra', 'eBay', 'Meesho']
valid_payment_types = ['card', 'Internet Banking', 'UPI', 'Wallet']
failure_reasons = {
    'card': ['Insufficient funds', 'Invalid card details', 'Card expired', 'Fraud suspected'],
    'Internet Banking': ['Payment gateway timeout', 'Exceeded transaction limit', 'Incorrect login credentials'],
    'UPI': ['Network issues', 'Incorrect UPI ID', 'Incorrect OTP'],
    'Wallet': ['Insufficient balance in wallet', 'Wallet account blocked', 'Wallet not authorized for transaction']
}

# Function to clean the schema
def clean_schema(df):
    df['qty'] = df['qty'].apply(lambda x: np.random.randint(1, 10) if pd.isnull(x) or x in [-1, 0, 1000] else x)
    df['price'] = df['price'].apply(lambda x: round(np.random.uniform(10, 500), 2) if pd.isnull(x) or x in [-100, 0] else x)
    df['payment_type'] = df['payment_type'].apply(lambda x: fake.random_element(elements=valid_payment_types) if pd.isnull(x) or x == 'Unknown' else x)
    df['country'] = df['country'].apply(lambda x: fake.country() if pd.isnull(x) or x == 'Unknown' else x)
    df['customer_name'] = df['customer_name'].apply(lambda x: fake.name() if pd.isnull(x) or not isinstance(x, str) or x.strip() == '' else x)
    df['ecommerce_website_name'] = df['ecommerce_website_name'].apply(lambda x: fake.random_element(elements=ecommerce_domains) if pd.isnull(x) or x not in ecommerce_domains else x)
    df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce').fillna(fake.date_time_this_decade())

    # Fill missing 'failure_reason' with 'No Failure' when 'payment_txn_success' is 'Y'
    df['failure_reason'] = df['failure_reason'].fillna('No Failure')

    return df

# Function to load and clean data
def load_and_clean_data(input_file, output_file):
    df = pd.read_csv(input_file)
    df_cleaned = clean_schema(df)
    df_cleaned.to_csv(output_file, index=False)
    print(f"Cleaned data saved to {output_file}")

    # Example usage
load_and_clean_data('generated_data2.csv', 'cleaned_generated_data.csv')
